plugins {
    id 'java'
    id 'jacoco'
    id 'org.springframework.boot' version '3.0.4'
    id 'io.spring.dependency-management' version '1.1.0'
}

group = 'org.dinosaur'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    maven { url "https://repo.osgeo.org/repository/release/" }
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'io.micrometer:micrometer-registry-prometheus'
    implementation platform("org.springframework.cloud:spring-cloud-dependencies:2022.0.2")
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.1.0'
    implementation 'org.hibernate:hibernate-spatial:6.2.7.Final'
    implementation 'org.geotools:gt-main:29.2'
    implementation 'org.geotools:gt-epsg-hsql:29.2'

    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    implementation 'io.jsonwebtoken:jjwt-impl:0.11.5'
    implementation 'io.jsonwebtoken:jjwt-jackson:0.11.5'

    //Start Querydsl
    implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
    annotationProcessor "com.querydsl:querydsl-apt:5.0.0:jakarta"

    //To response to java.lang.NoClassDefFoundError
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"
    //End Querydsl

    runtimeOnly 'com.mysql:mysql-connector-j'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'

    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testCompileOnly 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
}

tasks.named('test') {
    useJUnitPlatform()
    finalizedBy 'jacocoTestReport'
}

//Start Querydsl
//Where To Create Querydsl Q Class
def generated = 'src/main/generated'

//Set Querydsl Q class Generated Target
tasks.withType(JavaCompile).configureEach {
    options.getGeneratedSourceOutputDirectory().set(file(generated))
}

//Add Q Class Target In Java Source Set
sourceSets {
    main.java.srcDirs += [generated]
}

//When Gradle Clean, Delete Q Class Directory
clean {
    delete file(generated)
}
//End Querydsl

//Start JaCoCo
jacoco {
    toolVersion = "0.8.8"
}

jacocoTestReport {
    dependsOn test

    reports {
        html.enabled true
        xml.enabled true
        csv.enabled false
    }

    def Qdomains = []

    for (qPattern in "**/QA".."**/QZ") {
        Qdomains.add(qPattern + "*")
    }

    afterEvaluate {
        classDirectories.setFrom(
                files(classDirectories.files.collect {
                    fileTree(dir: it, excludes: [
                            '**/*Application*',
                            '**/*Docs*',
                            '**/*Request*',
                            '**/*Response*',
                            '**/*Responses*',
                            '**/*Dto*',
                            '**/*User.class',
                            '**/AuditingEntity.class',
                            '**/*Exception*',
                            '**/*ExceptionType*',
                            '**/*Config*',
                            '**/*Filter*',
                            '**/*ArgumentResolver*',
                            '**/*Handler*',
                            '**/*EntryPoint*',
                            "**/*Const"
                    ] + Qdomains)
                })
        )
    }

    finalizedBy 'jacocoTestCoverageVerification'
}

jacocoTestCoverageVerification {
    def Qdomains = []

    for (qPattern in '*.QA'..'*.QZ') {
        Qdomains.add(qPattern + '*')
    }

    violationRules {
        rule {
            enabled = true
            element = "CLASS"

            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.75
            }

            excludes = [
                    '*.*Application',
                    '*.*Docs',
                    '*.*Request',
                    '*.*Response',
                    '*.*Responses',
                    '*.*Dto',
                    '*.*User',
                    '*.*AuditingEntity',
                    '*.*Exception',
                    '*.*ExceptionType',
                    '*.*Config',
                    '*.*Filter',
                    '*.*ArgumentResolver',
                    '*.*Handler',
                    '*.*EntryPoint',
                    '*.*Const'
            ] + Qdomains
        }
    }
}
//End JaCoCo
