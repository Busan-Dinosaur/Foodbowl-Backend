name: Test When Pull Request

on:
  pull_request:
    branches:
      - master
      - develop

jobs:
  test:
    runs-on: ubuntu-22.04
    timeout-minutes: 10

    permissions:
      checks: write
      pull-requests: write

    steps:
      - name: 레포지토리 체크아웃
        uses: actions/checkout@v3

      - name: JDK 17 환경 설정
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: temurin

      - name: Github Container Registry 로그인한다.
        uses: docker/login-action@v2
        with:
          registry: ${{ secrets.DOCKER_REGISTRY }}
          username: ${{ secrets.ACTOR }}
          password: ${{ secrets.TOKEN }}

      - name: DB 도커 이미지 캐시 디렉토리를 생성한다.
        run: mkdir -p ~/db-docker-image

      - name: Gradle 캐시
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: DB 도커 이미지 캐시
        id: db-docker-image
        uses: actions/cache@v3
        with:
          path: ~/db-docker-image
          key: db-docker-image-${{ runner.os }}-${{ secrets.DB_IMAGE }}

      - name: DB 이미지를 내려받는다.
        if: steps.db-docker-image.outputs.cache-hit != 'true'
        run: |
          docker pull ${{ secrets.DOCKER_REGISTRY }}/${{ secrets.ACTOR }}/${{ secrets.DB_IMAGE }}
          docker tag ${{ secrets.DOCKER_REGISTRY }}/${{ secrets.ACTOR }}/${{ secrets.DB_IMAGE }} ${{ secrets.DB_IMAGE }}
          docker save -o \정
            ~/db-docker-image/foodbowl-db.tar \
            ${{ secrets.DB_IMAGE }}

      - name: application.yml 파일을 생성한다.
        working-directory: ./src/test/resources
        run: |
          touch .application.yml
          echo '${{ secrets.APPLICATION_YML }}' >> application.yml

      - name: 도커 환경 파일을 생성한다.
        working-directory: ./docker
        run: |
          touch .env
          echo '${{ secrets.DOCKER_ENV }}' >> .env

      - name: 컨테이너를 시작한다.
        working-directory: ./docker
        run: docker compose -f ./docker-compose-build.yml -p foodbowl up -d

      - name: Gradle 실행 권한 부여
        run: chmod +x gradlew

      - name: Gradle 테스트 실행
        run: ./gradlew --info test

      - name: 테스트 결과 PR 코멘트 등록
        uses: EnricoMi/publish-unit-test-result-action@v2
        if: always()
        with:
          files: '**/build/test-results/test/TEST-*.xml'

      - name: 테스트 실패 시 해당 코드 라인에 Check 등록
        uses: mikepenz/action-junit-report@v3
        if: always()
        with:
          report_paths: '**/build/test-results/test/TEST-*.xml'

      - name: 테스트 실패 시 Slack 알림
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          author_name: 백엔드 테스트 실패 알림
          fields: repo, message, commit, author, action, eventName, ref, workflow, job, took
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        if: failure()

